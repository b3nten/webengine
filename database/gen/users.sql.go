// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package queries

import (
	"context"
)

const addUser = `-- name: AddUser :one
INSERT INTO users (username, email) VALUES (?, ?) RETURNING id, username, email
`

type AddUserParams struct {
	Username string
	Email    string
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, addUser, arg.Username, arg.Email)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Email)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email FROM users WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Email)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, email FROM users WHERE id = ?
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Email)
	return i, err
}

const getUsersByUsername = `-- name: GetUsersByUsername :many
SELECT id, username, email FROM users WHERE username = ?
`

func (q *Queries) GetUsersByUsername(ctx context.Context, username string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Username, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
